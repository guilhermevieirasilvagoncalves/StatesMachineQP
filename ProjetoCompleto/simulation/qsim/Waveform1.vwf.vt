// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2022 22:19:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          projetocompleto
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projetocompleto_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_A;
reg CLOCK_B;
reg S0;
reg S1;
// wires                                               
wire Q0;
wire Q1;
wire Q2;
wire SEG_A;
wire SEG_B;
wire SEG_C;
wire SEG_D;
wire SEG_E;
wire SEG_F;
wire SEG_G;
wire Y0;
wire Y1;
wire Y2;

// assign statements (if any)                          
projetocompleto i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_A(CLOCK_A),
	.CLOCK_B(CLOCK_B),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.S0(S0),
	.S1(S1),
	.SEG_A(SEG_A),
	.SEG_B(SEG_B),
	.SEG_C(SEG_C),
	.SEG_D(SEG_D),
	.SEG_E(SEG_E),
	.SEG_F(SEG_F),
	.SEG_G(SEG_G),
	.Y0(Y0),
	.Y1(Y1),
	.Y2(Y2)
);
initial 
begin 
#1000000 $finish;
end 

// S1
initial
begin
	S1 = 1'b0;
	S1 = #400000 1'b1;
	S1 = #560000 1'b0;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #80000 1'b1;
	S0 = #360000 1'b0;
end 

// CLOCK_A
always
begin
	CLOCK_A = 1'b0;
	CLOCK_A = #20000 1'b1;
	#20000;
end 

// CLOCK_B
initial
begin
	CLOCK_B = 1'b1;
	CLOCK_B = #20000 1'b0;
	# 20000;
	repeat(23)
	begin
		CLOCK_B = 1'b1;
		CLOCK_B = #20000 1'b0;
		# 20000;
	end
	CLOCK_B = 1'b1;
	CLOCK_B = #20000 1'b0;
end 
endmodule

